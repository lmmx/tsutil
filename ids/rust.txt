0: end
1: identifier
2: ;
3: macro_rules!
4: (
5: )
6: [
7: ]
8: {
9: }
10: =>
11: :
12: $
13: token_repetition_pattern_token1
14: +
15: *
16: ?
17: block
18: expr
19: ident
20: item
21: lifetime
22: literal
23: meta
24: pat
25: path
26: stmt
27: tt
28: ty
29: vis
30: primitive_type
31: primitive_type
32: primitive_type
33: primitive_type
34: primitive_type
35: primitive_type
36: primitive_type
37: primitive_type
38: primitive_type
39: primitive_type
40: primitive_type
41: primitive_type
42: primitive_type
43: primitive_type
44: primitive_type
45: primitive_type
46: primitive_type
47: -
48: /
49: %
50: ^
51: !
52: &
53: |
54: &&
55: ||
56: <<
57: >>
58: +=
59: -=
60: *=
61: /=
62: %=
63: ^=
64: &=
65: |=
66: <<=
67: >>=
68: =
69: ==
70: !=
71: >
72: <
73: >=
74: <=
75: @
76: _
77: .
78: ..
79: ...
80: ..=
81: ,
82: ::
83: ->
84: #
85: '
86: as
87: async
88: await
89: break
90: const
91: continue
92: default
93: enum
94: fn
95: for
96: if
97: impl
98: let
99: loop
100: match
101: mod
102: pub
103: return
104: static
105: struct
106: trait
107: type
108: union
109: unsafe
110: use
111: where
112: while
113: extern
114: ref
115: else
116: in
117: <
118: dyn
119: mutable_specifier
120: yield
121: move
122: try
123: integer_literal
124: "
125: "
126: char_literal
127: escape_sequence
128: true
129: false
130: //
131: line_comment_token1
132: line_comment_token2
133: line_comment_token3
134: inner_doc_comment_marker
135: outer_doc_comment_marker
136: /*
137: */
138: shebang
139: self
140: super
141: crate
142: metavariable
143: string_content
144: _raw_string_literal_start
145: string_content
146: _raw_string_literal_end
147: float_literal
148: outer_doc_comment_marker
149: inner_doc_comment_marker
150: _block_comment_content
151: doc_comment
152: _error_sentinel
153: source_file
154: _statement
155: empty_statement
156: expression_statement
157: macro_definition
158: macro_rule
159: _token_pattern
160: token_tree_pattern
161: token_binding_pattern
162: token_repetition_pattern
163: fragment_specifier
164: token_tree
165: token_repetition
166: attribute_item
167: inner_attribute_item
168: attribute
169: mod_item
170: foreign_mod_item
171: declaration_list
172: struct_item
173: union_item
174: enum_item
175: enum_variant_list
176: enum_variant
177: field_declaration_list
178: field_declaration
179: ordered_field_declaration_list
180: extern_crate_declaration
181: const_item
182: static_item
183: type_item
184: function_item
185: function_signature_item
186: function_modifiers
187: where_clause
188: where_predicate
189: impl_item
190: trait_item
191: associated_type
192: trait_bounds
193: higher_ranked_trait_bound
194: removed_trait_bound
195: type_parameters
196: const_parameter
197: constrained_type_parameter
198: optional_type_parameter
199: let_declaration
200: use_declaration
201: _use_clause
202: scoped_use_list
203: use_list
204: use_as_clause
205: use_wildcard
206: parameters
207: self_parameter
208: variadic_parameter
209: parameter
210: extern_modifier
211: visibility_modifier
212: _type
213: bracketed_type
214: qualified_type
215: lifetime
216: array_type
217: for_lifetimes
218: function_type
219: tuple_type
220: unit_type
221: generic_function
222: generic_type
223: generic_type_with_turbofish
224: bounded_type
225: type_arguments
226: type_binding
227: reference_type
228: pointer_type
229: never_type
230: abstract_type
231: dynamic_type
232: _expression_except_range
233: _expression
234: macro_invocation
235: token_tree
236: _delim_tokens
237: _non_delim_token
238: scoped_identifier
239: scoped_type_identifier
240: scoped_type_identifier
241: range_expression
242: unary_expression
243: try_expression
244: reference_expression
245: binary_expression
246: assignment_expression
247: compound_assignment_expr
248: type_cast_expression
249: return_expression
250: yield_expression
251: call_expression
252: arguments
253: array_expression
254: parenthesized_expression
255: tuple_expression
256: unit_expression
257: struct_expression
258: field_initializer_list
259: shorthand_field_initializer
260: field_initializer
261: base_field_initializer
262: if_expression
263: let_condition
264: _let_chain
265: _condition
266: else_clause
267: match_expression
268: match_block
269: match_arm
270: match_arm
271: match_pattern
272: while_expression
273: loop_expression
274: for_expression
275: const_block
276: closure_expression
277: closure_parameters
278: label
279: break_expression
280: continue_expression
281: index_expression
282: await_expression
283: field_expression
284: unsafe_block
285: async_block
286: try_block
287: block
288: _pattern
289: tuple_pattern
290: slice_pattern
291: tuple_struct_pattern
292: struct_pattern
293: field_pattern
294: remaining_field_pattern
295: mut_pattern
296: range_pattern
297: ref_pattern
298: captured_pattern
299: reference_pattern
300: or_pattern
301: _literal
302: _literal_pattern
303: negative_literal
304: string_literal
305: raw_string_literal
306: boolean_literal
307: line_comment
308: _line_doc_comment_marker
309: block_comment
310: _block_doc_comment_marker
311: source_file_repeat1
312: macro_definition_repeat1
313: token_tree_pattern_repeat1
314: token_tree_repeat1
315: _non_special_token_repeat1
316: declaration_list_repeat1
317: enum_variant_list_repeat1
318: enum_variant_list_repeat2
319: field_declaration_list_repeat1
320: ordered_field_declaration_list_repeat1
321: function_modifiers_repeat1
322: where_clause_repeat1
323: trait_bounds_repeat1
324: type_parameters_repeat1
325: use_list_repeat1
326: parameters_repeat1
327: for_lifetimes_repeat1
328: tuple_type_repeat1
329: type_arguments_repeat1
330: delim_token_tree_repeat1
331: arguments_repeat1
332: tuple_expression_repeat1
333: field_initializer_list_repeat1
334: match_block_repeat1
335: match_arm_repeat1
336: closure_parameters_repeat1
337: tuple_pattern_repeat1
338: slice_pattern_repeat1
339: struct_pattern_repeat1
340: string_literal_repeat1
341: field_identifier
342: let_chain
343: shorthand_field_identifier
344: type_identifier
